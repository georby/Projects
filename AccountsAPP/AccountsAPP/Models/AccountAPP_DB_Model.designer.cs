#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccountsAPP.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ACCOUNTSDB_GEO")]
	public partial class AccountAPP_DB_ModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountDetails(AccountDetails instance);
    partial void UpdateAccountDetails(AccountDetails instance);
    partial void DeleteAccountDetails(AccountDetails instance);
    partial void InsertCurrencyDetails(CurrencyDetails instance);
    partial void UpdateCurrencyDetails(CurrencyDetails instance);
    partial void DeleteCurrencyDetails(CurrencyDetails instance);
    partial void InsertTransactionLogDetails(TransactionLogDetails instance);
    partial void UpdateTransactionLogDetails(TransactionLogDetails instance);
    partial void DeleteTransactionLogDetails(TransactionLogDetails instance);
    #endregion
		
		public AccountAPP_DB_ModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ACCOUNTSDB_GEOConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AccountAPP_DB_ModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccountAPP_DB_ModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccountAPP_DB_ModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccountAPP_DB_ModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountDetails> AccountDetails
		{
			get
			{
				return this.GetTable<AccountDetails>();
			}
		}
		
		public System.Data.Linq.Table<CurrencyDetails> CurrencyDetails
		{
			get
			{
				return this.GetTable<CurrencyDetails>();
			}
		}
		
		public System.Data.Linq.Table<TransactionLogDetails> TransactionLogDetails
		{
			get
			{
				return this.GetTable<TransactionLogDetails>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.accountDetails")]
	public partial class AccountDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _accountId;
		
		private string _holderName;
		
		private decimal _accountBalance;
		
		private System.DateTime _addedOn;
		
		private string _addedBy;
		
		private System.DateTime _modifiedOn;
		
		private string _modifiedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnaccountIdChanging(int value);
    partial void OnaccountIdChanged();
    partial void OnholderNameChanging(string value);
    partial void OnholderNameChanged();
    partial void OnaccountBalanceChanging(decimal value);
    partial void OnaccountBalanceChanged();
    partial void OnaddedOnChanging(System.DateTime value);
    partial void OnaddedOnChanged();
    partial void OnaddedByChanging(string value);
    partial void OnaddedByChanged();
    partial void OnmodifiedOnChanging(System.DateTime value);
    partial void OnmodifiedOnChanged();
    partial void OnmodifiedByChanging(string value);
    partial void OnmodifiedByChanged();
    #endregion
		
		public AccountDetails()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int accountId
		{
			get
			{
				return this._accountId;
			}
			set
			{
				if ((this._accountId != value))
				{
					this.OnaccountIdChanging(value);
					this.SendPropertyChanging();
					this._accountId = value;
					this.SendPropertyChanged("accountId");
					this.OnaccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_holderName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string holderName
		{
			get
			{
				return this._holderName;
			}
			set
			{
				if ((this._holderName != value))
				{
					this.OnholderNameChanging(value);
					this.SendPropertyChanging();
					this._holderName = value;
					this.SendPropertyChanged("holderName");
					this.OnholderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accountBalance", DbType="Decimal(18,5) NOT NULL")]
		public decimal accountBalance
		{
			get
			{
				return this._accountBalance;
			}
			set
			{
				if ((this._accountBalance != value))
				{
					this.OnaccountBalanceChanging(value);
					this.SendPropertyChanging();
					this._accountBalance = value;
					this.SendPropertyChanged("accountBalance");
					this.OnaccountBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addedOn", DbType="DateTime2 NOT NULL")]
		public System.DateTime addedOn
		{
			get
			{
				return this._addedOn;
			}
			set
			{
				if ((this._addedOn != value))
				{
					this.OnaddedOnChanging(value);
					this.SendPropertyChanging();
					this._addedOn = value;
					this.SendPropertyChanged("addedOn");
					this.OnaddedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string addedBy
		{
			get
			{
				return this._addedBy;
			}
			set
			{
				if ((this._addedBy != value))
				{
					this.OnaddedByChanging(value);
					this.SendPropertyChanging();
					this._addedBy = value;
					this.SendPropertyChanged("addedBy");
					this.OnaddedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedOn", DbType="DateTime2 NOT NULL")]
		public System.DateTime modifiedOn
		{
			get
			{
				return this._modifiedOn;
			}
			set
			{
				if ((this._modifiedOn != value))
				{
					this.OnmodifiedOnChanging(value);
					this.SendPropertyChanging();
					this._modifiedOn = value;
					this.SendPropertyChanged("modifiedOn");
					this.OnmodifiedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string modifiedBy
		{
			get
			{
				return this._modifiedBy;
			}
			set
			{
				if ((this._modifiedBy != value))
				{
					this.OnmodifiedByChanging(value);
					this.SendPropertyChanging();
					this._modifiedBy = value;
					this.SendPropertyChanged("modifiedBy");
					this.OnmodifiedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.currencyDetails")]
	public partial class CurrencyDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _currencyId;
		
		private string _currencyCode;
		
		private string _currencyName;
		
		private decimal _conversionRateToDollar;
		
		private System.DateTime _addedOn;
		
		private string _addedBy;
		
		private System.DateTime _modifiedOn;
		
		private string _modifiedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncurrencyIdChanging(int value);
    partial void OncurrencyIdChanged();
    partial void OncurrencyCodeChanging(string value);
    partial void OncurrencyCodeChanged();
    partial void OncurrencyNameChanging(string value);
    partial void OncurrencyNameChanged();
    partial void OnconversionRateToDollarChanging(decimal value);
    partial void OnconversionRateToDollarChanged();
    partial void OnaddedOnChanging(System.DateTime value);
    partial void OnaddedOnChanged();
    partial void OnaddedByChanging(string value);
    partial void OnaddedByChanged();
    partial void OnmodifiedOnChanging(System.DateTime value);
    partial void OnmodifiedOnChanged();
    partial void OnmodifiedByChanging(string value);
    partial void OnmodifiedByChanged();
    #endregion
		
		public CurrencyDetails()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currencyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int currencyId
		{
			get
			{
				return this._currencyId;
			}
			set
			{
				if ((this._currencyId != value))
				{
					this.OncurrencyIdChanging(value);
					this.SendPropertyChanging();
					this._currencyId = value;
					this.SendPropertyChanged("currencyId");
					this.OncurrencyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currencyCode", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string currencyCode
		{
			get
			{
				return this._currencyCode;
			}
			set
			{
				if ((this._currencyCode != value))
				{
					this.OncurrencyCodeChanging(value);
					this.SendPropertyChanging();
					this._currencyCode = value;
					this.SendPropertyChanged("currencyCode");
					this.OncurrencyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currencyName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string currencyName
		{
			get
			{
				return this._currencyName;
			}
			set
			{
				if ((this._currencyName != value))
				{
					this.OncurrencyNameChanging(value);
					this.SendPropertyChanging();
					this._currencyName = value;
					this.SendPropertyChanged("currencyName");
					this.OncurrencyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_conversionRateToDollar", DbType="Decimal(18,5) NOT NULL")]
		public decimal conversionRateToDollar
		{
			get
			{
				return this._conversionRateToDollar;
			}
			set
			{
				if ((this._conversionRateToDollar != value))
				{
					this.OnconversionRateToDollarChanging(value);
					this.SendPropertyChanging();
					this._conversionRateToDollar = value;
					this.SendPropertyChanged("conversionRateToDollar");
					this.OnconversionRateToDollarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addedOn", DbType="DateTime2 NOT NULL")]
		public System.DateTime addedOn
		{
			get
			{
				return this._addedOn;
			}
			set
			{
				if ((this._addedOn != value))
				{
					this.OnaddedOnChanging(value);
					this.SendPropertyChanging();
					this._addedOn = value;
					this.SendPropertyChanged("addedOn");
					this.OnaddedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string addedBy
		{
			get
			{
				return this._addedBy;
			}
			set
			{
				if ((this._addedBy != value))
				{
					this.OnaddedByChanging(value);
					this.SendPropertyChanging();
					this._addedBy = value;
					this.SendPropertyChanged("addedBy");
					this.OnaddedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedOn", DbType="DateTime2 NOT NULL")]
		public System.DateTime modifiedOn
		{
			get
			{
				return this._modifiedOn;
			}
			set
			{
				if ((this._modifiedOn != value))
				{
					this.OnmodifiedOnChanging(value);
					this.SendPropertyChanging();
					this._modifiedOn = value;
					this.SendPropertyChanged("modifiedOn");
					this.OnmodifiedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modifiedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string modifiedBy
		{
			get
			{
				return this._modifiedBy;
			}
			set
			{
				if ((this._modifiedBy != value))
				{
					this.OnmodifiedByChanging(value);
					this.SendPropertyChanging();
					this._modifiedBy = value;
					this.SendPropertyChanged("modifiedBy");
					this.OnmodifiedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.transactionLog")]
	public partial class TransactionLogDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _transactionId;
		
		private int _accountId;
		
		private string _currencyCode;
		
		private decimal _ConversionRateToDollar;
		
		private decimal _balanceBefore;
		
		private decimal _balanceAfter;
		
		private string _transactionType;
		
		private decimal _transactionAmount;
		
		private System.DateTime _addedOn;
		
		private string _addedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntransactionIdChanging(int value);
    partial void OntransactionIdChanged();
    partial void OnaccountIdChanging(int value);
    partial void OnaccountIdChanged();
    partial void OncurrencyCodeChanging(string value);
    partial void OncurrencyCodeChanged();
    partial void OnConversionRateToDollarChanging(decimal value);
    partial void OnConversionRateToDollarChanged();
    partial void OnbalanceBeforeChanging(decimal value);
    partial void OnbalanceBeforeChanged();
    partial void OnbalanceAfterChanging(decimal value);
    partial void OnbalanceAfterChanged();
    partial void OntransactionTypeChanging(string value);
    partial void OntransactionTypeChanged();
    partial void OntransactionAmountChanging(decimal value);
    partial void OntransactionAmountChanged();
    partial void OnaddedOnChanging(System.DateTime value);
    partial void OnaddedOnChanged();
    partial void OnaddedByChanging(string value);
    partial void OnaddedByChanged();
    #endregion
		
		public TransactionLogDetails()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transactionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int transactionId
		{
			get
			{
				return this._transactionId;
			}
			set
			{
				if ((this._transactionId != value))
				{
					this.OntransactionIdChanging(value);
					this.SendPropertyChanging();
					this._transactionId = value;
					this.SendPropertyChanged("transactionId");
					this.OntransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accountId", DbType="Int NOT NULL")]
		public int accountId
		{
			get
			{
				return this._accountId;
			}
			set
			{
				if ((this._accountId != value))
				{
					this.OnaccountIdChanging(value);
					this.SendPropertyChanging();
					this._accountId = value;
					this.SendPropertyChanged("accountId");
					this.OnaccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currencyCode", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string currencyCode
		{
			get
			{
				return this._currencyCode;
			}
			set
			{
				if ((this._currencyCode != value))
				{
					this.OncurrencyCodeChanging(value);
					this.SendPropertyChanging();
					this._currencyCode = value;
					this.SendPropertyChanged("currencyCode");
					this.OncurrencyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversionRateToDollar", DbType="Decimal(18,5) NOT NULL")]
		public decimal ConversionRateToDollar
		{
			get
			{
				return this._ConversionRateToDollar;
			}
			set
			{
				if ((this._ConversionRateToDollar != value))
				{
					this.OnConversionRateToDollarChanging(value);
					this.SendPropertyChanging();
					this._ConversionRateToDollar = value;
					this.SendPropertyChanged("ConversionRateToDollar");
					this.OnConversionRateToDollarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_balanceBefore", DbType="Decimal(18,5) NOT NULL")]
		public decimal balanceBefore
		{
			get
			{
				return this._balanceBefore;
			}
			set
			{
				if ((this._balanceBefore != value))
				{
					this.OnbalanceBeforeChanging(value);
					this.SendPropertyChanging();
					this._balanceBefore = value;
					this.SendPropertyChanged("balanceBefore");
					this.OnbalanceBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_balanceAfter", DbType="Decimal(18,5) NOT NULL")]
		public decimal balanceAfter
		{
			get
			{
				return this._balanceAfter;
			}
			set
			{
				if ((this._balanceAfter != value))
				{
					this.OnbalanceAfterChanging(value);
					this.SendPropertyChanging();
					this._balanceAfter = value;
					this.SendPropertyChanged("balanceAfter");
					this.OnbalanceAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transactionType", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string transactionType
		{
			get
			{
				return this._transactionType;
			}
			set
			{
				if ((this._transactionType != value))
				{
					this.OntransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._transactionType = value;
					this.SendPropertyChanged("transactionType");
					this.OntransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transactionAmount", DbType="Decimal(18,5) NOT NULL")]
		public decimal transactionAmount
		{
			get
			{
				return this._transactionAmount;
			}
			set
			{
				if ((this._transactionAmount != value))
				{
					this.OntransactionAmountChanging(value);
					this.SendPropertyChanging();
					this._transactionAmount = value;
					this.SendPropertyChanged("transactionAmount");
					this.OntransactionAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addedOn", DbType="DateTime2 NOT NULL")]
		public System.DateTime addedOn
		{
			get
			{
				return this._addedOn;
			}
			set
			{
				if ((this._addedOn != value))
				{
					this.OnaddedOnChanging(value);
					this.SendPropertyChanging();
					this._addedOn = value;
					this.SendPropertyChanged("addedOn");
					this.OnaddedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string addedBy
		{
			get
			{
				return this._addedBy;
			}
			set
			{
				if ((this._addedBy != value))
				{
					this.OnaddedByChanging(value);
					this.SendPropertyChanging();
					this._addedBy = value;
					this.SendPropertyChanged("addedBy");
					this.OnaddedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
